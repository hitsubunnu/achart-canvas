// Generated by CoffeeScript 1.6.2
var ChartLine;

ChartLine = (function() {
  function ChartLine(options) {
    var _ref, _ref1, _ref2, _ref3, _ref4;

    this.title = options.title;
    this.id = options.id;
    this.W = (_ref = options.width) != null ? _ref : 960;
    this.H = (_ref1 = options.height) != null ? _ref1 : 480;
    this.ll = options.label_left;
    this.lb = options.label_bottom;
    this.data = options.data;
    this.average = options.average;
    this.R = (_ref2 = options.ratio) != null ? _ref2 : 0.8;
    this.digit = (_ref3 = options.digit) != null ? _ref3 : 6;
    this.Z = (_ref4 = options.zoom) != null ? _ref4 : this.W / 960;
  }

  ChartLine.prototype.draw = function() {
    var F, avg, cali, fonts, gpath, group_lines, h, height, i, layer_avg, layer_backdrop, layer_graphic, layer_label, layer_line, layer_lr, lb_y, line, lr_avg0, lr_avg1, lr_date, lr_value, lr_x, path, stage, txt, v, w, x, x0, y, y0, _base, _base1, _base2, _fn, _i, _j, _k, _l, _len, _len1, _len2, _m, _n, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8,
      _this = this;

    F = Math.pow(10, this.digit);
    w = this.R * this.W;
    h = this.R * this.H;
    x0 = (1 - this.R) / 2 * this.W;
    y0 = (1 - this.R) / 2 * this.H;
    height = this.ll.max - this.ll.min;
    cali = w / this.data.length;
    stage = new Kinetic.Stage({
      container: this.id,
      width: this.W,
      height: this.H
    });
    fonts = ['MS Gothic', 'sans-serif'];
    this.ll.max = Number(this.ll.max);
    this.ll.min = Number(this.ll.min);
    if ((_ref = (_base = this.ll).cali) == null) {
      _base.cali = 5;
    }
    if ((_ref1 = (_base1 = this.average[0]).color) == null) {
      _base1.color = '#0099cc';
    }
    if ((_ref2 = (_base2 = this.average[1]).color) == null) {
      _base2.color = '#ff9900';
    }
    layer_label = new Kinetic.Layer();
    layer_lr = new Kinetic.Layer();
    layer_backdrop = new Kinetic.Layer();
    layer_avg = new Kinetic.Layer();
    layer_graphic = new Kinetic.Layer();
    layer_line = new Kinetic.Layer;
    group_lines = new Kinetic.Group;
    layer_line.add(group_lines);
    layer_label.add(new Kinetic.Text({
      x: 0,
      y: y0 / 2,
      width: this.W,
      text: this.title.string,
      fill: 'brown',
      fontSize: 16 * this.Z,
      align: 'center',
      'fontFamily': fonts
    }));
    for (i = _i = 0, _ref3 = this.ll.cali; 0 <= _ref3 ? _i <= _ref3 : _i >= _ref3; i = 0 <= _ref3 ? ++_i : --_i) {
      y = y0 + h * (this.ll.cali - i) / this.ll.cali - 7 * this.Z;
      txt = (this.ll.min + (this.ll.max - this.ll.min) / this.ll.cali * i).toFixed(this.digit);
      layer_label.add(new Kinetic.Text({
        x: 0,
        y: y,
        width: x0 - 6 * this.Z,
        text: txt,
        align: 'right',
        fill: 'gray',
        'fontStyle': 'bold',
        'fontFamily': ['MS Gothic', 'sans-serif'],
        'fontSize': 12 * this.Z
      }));
    }
    lr_x = x0 + w + 6 * this.Z;
    layer_label.add(new Kinetic.Rect({
      x: lr_x,
      y: y0,
      width: 12 * this.Z,
      height: 12 * this.Z,
      fill: '#3366CC'
    }));
    layer_label.add(new Kinetic.Text({
      x: lr_x + 16 * this.Z,
      y: y0,
      text: 'レート',
      fill: '#3366CC',
      fontSize: 12 * this.Z,
      align: 'left',
      'fontStyle': 'bold',
      'fontFamily': fonts
    }));
    lr_value = new Kinetic.Text({
      x: lr_x,
      y: y0 + 20 * this.Z,
      width: x0 - 12 * this.Z,
      align: 'left',
      text: ' ',
      fill: '#3366CC',
      fontSize: 12 * this.Z,
      'fontStyle': 'bold',
      'fontFamily': fonts
    });
    layer_lr.add(lr_value);
    layer_label.add(new Kinetic.Rect({
      x: lr_x,
      y: y0 + 20 * this.Z * 2,
      width: 12 * this.Z,
      height: 12 * this.Z,
      fill: this.average[0].color
    }));
    layer_label.add(new Kinetic.Text({
      x: lr_x + 16 * this.Z,
      y: y0 + 20 * this.Z * 2,
      text: this.average[0].string,
      fill: this.average[0].color,
      fontSize: 12 * this.Z,
      align: 'left',
      'fontStyle': 'bold',
      'fontFamily': fonts
    }));
    lr_avg0 = new Kinetic.Text({
      x: lr_x,
      y: y0 + 20 * this.Z * 3,
      width: x0 - 12 * this.Z,
      align: 'left',
      text: ' ',
      fill: this.average[0].color,
      fontSize: 12 * this.Z,
      'fontStyle': 'bold',
      'fontFamily': fonts
    });
    layer_lr.add(lr_avg0);
    layer_label.add(new Kinetic.Rect({
      x: lr_x,
      y: y0 + 20 * this.Z * 4,
      width: 12 * this.Z,
      height: 12 * this.Z,
      fill: this.average[1].color
    }));
    layer_label.add(new Kinetic.Text({
      x: lr_x + 16 * this.Z,
      y: y0 + 20 * this.Z * 4,
      text: this.average[1].string,
      fill: this.average[1].color,
      fontSize: 12 * this.Z,
      align: 'left',
      'fontStyle': 'bold',
      'fontFamily': fonts
    }));
    lr_avg1 = new Kinetic.Text({
      x: lr_x,
      y: y0 + 20 * this.Z * 5,
      width: x0 - 12 * this.Z,
      align: 'left',
      text: ' ',
      fill: this.average[1].color,
      fontSize: 12 * this.Z,
      'fontStyle': 'bold',
      'fontFamily': fonts
    });
    layer_lr.add(lr_avg1);
    layer_label.add(new Kinetic.Rect({
      x: lr_x,
      y: y0 + 20 * this.Z * 6,
      width: 12 * this.Z,
      height: 12 * this.Z,
      fill: '#CC0000'
    }));
    layer_label.add(new Kinetic.Text({
      x: lr_x + 16 * this.Z,
      y: y0 + 20 * this.Z * 6,
      text: '日付',
      fill: '#CC0000',
      fontSize: 12 * this.Z,
      align: 'left',
      'fontStyle': 'bold',
      'fontFamily': fonts
    }));
    lr_date = new Kinetic.Text({
      x: lr_x,
      y: y0 + 20 * this.Z * 7,
      width: x0 - 12 * this.Z,
      align: 'left',
      text: ' ',
      fill: '#CC0000',
      fontSize: 10 * this.Z,
      'fontStyle': 'bold',
      'fontFamily': fonts
    });
    layer_lr.add(lr_date);
    lb_y = 1.5 * y0 + h;
    for (i = _j = 0, _ref4 = this.lb.length - 1; 0 <= _ref4 ? _j <= _ref4 : _j >= _ref4; i = 0 <= _ref4 ? ++_j : --_j) {
      x = x0 + w / (this.lb.length - 1) * i;
      layer_label.add(new Kinetic.Text({
        x: x - 50 * this.Z,
        y: lb_y,
        text: this.lb[i],
        'fontSize': 12 * this.Z,
        fill: 'gray',
        'fontFamily': fonts
      }));
    }
    for (i = _k = 0, _ref5 = this.ll.cali; 0 <= _ref5 ? _k <= _ref5 : _k >= _ref5; i = 0 <= _ref5 ? ++_k : --_k) {
      x = x0 + w;
      y = y0 + h * i / this.ll.cali;
      layer_backdrop.add(new Kinetic.Line({
        points: [x0, y, x, y],
        stroke: "#CCC",
        strokeWidth: 1
      }));
    }
    _ref6 = this.average;
    for (_l = 0, _len = _ref6.length; _l < _len; _l++) {
      avg = _ref6[_l];
      path = "";
      _ref7 = avg.values;
      for (i = _m = 0, _len1 = _ref7.length; _m < _len1; i = ++_m) {
        v = _ref7[i];
        if (!v) {
          continue;
        }
        x = x0 + cali * i + cali / 2;
        y = y0 + (this.ll.max - v) / height * h;
        if (path) {
          path += "L" + x + "," + y;
        } else {
          path = "M" + x + "," + y;
        }
      }
      layer_avg.add(new Kinetic.Path({
        data: path,
        stroke: avg.color,
        lineJoin: "round",
        strokeWidth: 1
      }));
    }
    gpath = "";
    _ref8 = this.data;
    _fn = function() {
      var circle, circle_avg0, circle_avg1, cv_avg0, cv_avg1, cx, cy, cy_avg0, cy_avg1, date, rect, red_line, red_rect, value;

      date = line[0];
      value = line[1];
      cx = x0 + cali * i + cali / 2;
      cy = y0 + (_this.ll.max - value) / height * h;
      cy_avg0 = y0 + (_this.ll.max - _this.average[0].values[i]) / height * h;
      cy_avg1 = y0 + (_this.ll.max - _this.average[1].values[i]) / height * h;
      cv_avg0 = _this.average[0].values[i];
      cv_avg1 = _this.average[1].values[i];
      if (gpath) {
        gpath += "L" + cx + "," + cy;
      } else {
        gpath = "M" + cx + "," + cy;
      }
      red_line = new Kinetic.Path({
        data: "M" + cx + "," + y0 + "L" + cx + "," + (y0 + h),
        stroke: '#CC0000',
        opacity: 0
      });
      red_rect = new Kinetic.Rect({
        x: cx - cali / 2,
        y: y0 + h,
        width: cali,
        height: 5 * _this.Z,
        fill: '#CC0000',
        opacity: 0
      });
      circle = new Kinetic.Circle({
        x: cx,
        y: cy,
        radius: 4 * _this.Z,
        fill: '#3366CC',
        opacity: 0
      });
      circle_avg0 = new Kinetic.Circle({
        x: cx,
        y: cy_avg0,
        radius: 4 * _this.Z,
        fill: _this.average[0].color,
        opacity: 0
      });
      circle_avg1 = new Kinetic.Circle({
        x: cx,
        y: cy_avg1,
        radius: 4 * _this.Z,
        fill: _this.average[1].color,
        opacity: 0
      });
      group_lines.add(red_line);
      group_lines.add(red_rect);
      group_lines.add(circle);
      group_lines.add(circle_avg0);
      group_lines.add(circle_avg1);
      rect = new Kinetic.Rect({
        x: x0 + cali * i,
        y: y0,
        width: cali,
        height: h,
        fill: '#FFF',
        'opacity': 0
      });
      rect.on('mouseover touchmove tap', function() {
        var g, _len3, _o, _ref9;

        _ref9 = group_lines.getChildren();
        for (_o = 0, _len3 = _ref9.length; _o < _len3; _o++) {
          g = _ref9[_o];
          g.setOpacity(0);
        }
        red_line.setOpacity(1);
        red_rect.setOpacity(1);
        circle.setOpacity(1);
        circle_avg0.setOpacity(1);
        circle_avg1.setOpacity(1);
        lr_date.setText(date);
        lr_value.setText(value);
        lr_avg0.setText(cv_avg0);
        lr_avg1.setText(cv_avg1);
        layer_line.draw();
        return layer_lr.draw();
      });
      return layer_graphic.add(rect);
    };
    for (i = _n = 0, _len2 = _ref8.length; _n < _len2; i = ++_n) {
      line = _ref8[i];
      if (!line[1]) {
        continue;
      }
      _fn();
    }
    layer_avg.add(new Kinetic.Path({
      data: gpath,
      'stroke': '#3366CC',
      lineJoin: "round",
      strokeWidth: 2,
      shadow: {
        color: '#3366CC'
      }
    }));
    stage.add(layer_label);
    stage.add(layer_lr);
    stage.add(layer_backdrop);
    stage.add(layer_avg);
    stage.add(layer_line);
    return stage.add(layer_graphic);
  };

  return ChartLine;

})();
